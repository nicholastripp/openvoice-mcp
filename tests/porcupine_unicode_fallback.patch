# Graceful Unicode Fallback for Picovoice Error Messages
# This patch adds encoding detection and ASCII fallback for Raspberry Pi compatibility
#
# Apply with: patch -p1 < tests/porcupine_unicode_fallback.patch
# Or manually implement the changes below

--- a/src/wake_word/porcupine_detector.py
+++ b/src/wake_word/porcupine_detector.py
@@ -27,6 +27,22 @@ except ImportError:
     pvporcupine = None


+def _supports_unicode():
+    """Check if terminal supports UTF-8 encoding"""
+    import sys
+    if hasattr(sys.stdout, 'encoding') and sys.stdout.encoding:
+        return 'utf' in sys.stdout.encoding.lower()
+    return False
+
+
+def _get_box_char():
+    """Get box drawing character with ASCII fallback"""
+    return "━" if _supports_unicode() else "-"
+
+
+def _get_warning_char():
+    """Get warning character with ASCII fallback"""
+    return "⚠️" if _supports_unicode() else "[!]"
+
+
 class PorcupineDetector:
     """
     Wake word detection using Picovoice Porcupine
@@ -319,9 +335,11 @@ def create_porcupine():
             error_str = str(e)
             error_type = type(e).__name__

+            box = _get_box_char()
+            warning = _get_warning_char()
+
             if "PorcupineActivationLimitError" in error_type or "00000136" in error_str:
-                self.logger.error("━" * 70)
-                self.logger.error("⚠️  PICOVOICE DEVICE LIMIT REACHED")
-                self.logger.error("━" * 70)
+                self.logger.error(box * 70)
+                self.logger.error(f"{warning}  PICOVOICE DEVICE LIMIT REACHED")
+                self.logger.error(box * 70)
                 self.logger.error("")
                 self.logger.error("Your Picovoice account has reached its device activation limit.")
@@ -333,11 +351,11 @@ def create_porcupine():
                 self.logger.error("")
                 self.logger.error("Alternatively, disable wake word detection:")
                 self.logger.error("  • Edit config/config.yaml")
                 self.logger.error("  • Set wake_word.enabled to false")
-                self.logger.error("━" * 70)
+                self.logger.error(box * 70)
             elif "AccessKey" in error_str or "PorcupineInvalidArgumentError" in error_type:
-                self.logger.error("━" * 70)
-                self.logger.error("⚠️  INVALID PICOVOICE ACCESS KEY")
-                self.logger.error("━" * 70)
+                self.logger.error(box * 70)
+                self.logger.error(f"{warning}  INVALID PICOVOICE ACCESS KEY")
+                self.logger.error(box * 70)
                 self.logger.error("")
                 self.logger.error("Your Picovoice access key is invalid or has expired.")
                 self.logger.error("")
@@ -347,7 +365,7 @@ def create_porcupine():
                 self.logger.error("  3. Generate a new access key")
                 self.logger.error("  4. Update PICOVOICE_ACCESS_KEY in your .env file")
-                self.logger.error("━" * 70)
+                self.logger.error(box * 70)
             elif isinstance(e, TimeoutError):
                 self.logger.error("Check your internet connection and firewall settings")
             else:
